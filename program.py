import tkinter as tk
from tkinter import Canvas, Frame
from pulp_solver import *


# Function to handle the drag-and-drop functionality
def on_drag_start(event, task):
    widget = event.widget
    widget.startX = event.x
    widget.startY = event.y
    widget.task = task


def on_drag_motion(event):
    widget = event.widget
    deltax = event.x - widget.startX
    deltay = event.y - widget.startY
    widget.move(widget.task, deltax, deltay)
    widget.startX = event.x
    widget.startY = event.y


def create_gantt_chart(schedule):
    root = tk.Tk()
    root.title("Gantt Chart")

    canvas_width = 800
    canvas_height = len(schedule) * 10000

    canvas = tk.Canvas(root, width=canvas_width, height=canvas_height, bg='white')
    canvas.pack()

    resource_positions = {}  # Store resource positions on the chart

    for idx, (_, tasks) in enumerate(schedule.items()):
        y = idx * 100 + 30

        for task in tasks:
            resource_id = task['resource_id']
            if resource_id not in resource_positions:
                resource_positions[resource_id] = y

            start_time = task['start_time'] * 50
            end_time = task['end_time'] * 50

            # Draw rectangles representing tasks on each resource's timeline
            canvas.create_rectangle(start_time, y, end_time, y + 40, fill=task['color'], outline='black')
            canvas.create_text(start_time + 2, y + 20, text=task['job_name'], anchor=tk.W, fill='black')

            y += 50

    root.mainloop()


def run_algorithm_and_update_gui():
    # Run your production planning algorithm here and get the schedule
    # Replace this with the actual function call and schedule retrieval based on your algorithm
    schedule = get_production_schedule()

    create_gantt_chart(schedule)


def get_production_schedule():
    # Replace this function with the call to your production planning algorithm
    # Return the schedule generated by your algorithm
    jobs = {
        1: {'duration': 3, 'resource': 'A', 'level': 1, 'name': 'Job_A'},
        2: {'duration': 2, 'resource': 'B', 'level': 2, 'name': 'Job_B'},
        3: {'duration': 4, 'resource': 'A', 'level': 2, 'name': 'Job_C'},
        4: {'duration': 2, 'resource': 'C', 'level': 2, 'name': 'Job_D'},
        5: {'duration': 5, 'resource': 'A', 'level': 3, 'name': 'Job_E'},
    }
    # Job dependencies (lower level needs to finish before higher level begins)
    dependencies = [
        (1, 2),
        (1, 3),
        (1, 4),
        (2, 5),
        (3, 5),
        (4, 5),
    ]

    schedule = pulp_solve(jobs, dependencies)

    return schedule


# Running the application

if __name__ == "__main__":
    run_algorithm_and_update_gui()
